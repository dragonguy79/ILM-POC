-----------------------------------
-- Setup test
-----------------------------------
@@../BeforeTest.sql;


-----------------------------------
-- Run test
-----------------------------------
-- run HOT2COLD job
BEGIN
  ILM_CORE.CREATE_JOB('HOT2COLD');
END;
/
@@TestHOT2COLD.sql;

-- test ILM_COMMON.TABLESPACE_EXIST
DECLARE
  RESULT_VALUE NUMBER;
BEGIN
  RESULT_VALUE := ILM_COMMON.TABLESPACE_EXIST('ILM_HOT_TBS');
  IF RESULT_VALUE != 1 THEN
   DBMS_OUTPUT.PUT_LINE('ILM_COMMON.TABLESPACE_EXIST failed: cannot find tablespace ILM_HOT_TBS');
  END IF;
  
  RESULT_VALUE := ILM_COMMON.TABLESPACE_EXIST('ILM_NONEXIST_TBS');
  IF RESULT_VALUE != 0 THEN
   DBMS_OUTPUT.PUT_LINE('ILM_COMMON.TABLESPACE_EXIST failed: found non-existing tablespace ILM_NONEXIST_TBS');
  END IF;
END;
/

-- test ILM_COMMON.TABLE_EXIST
DECLARE
  RESULT_VALUE NUMBER;
BEGIN
  RESULT_VALUE := ILM_COMMON.TABLE_EXIST('ILMJOB');
  IF RESULT_VALUE != 1 THEN
   DBMS_OUTPUT.PUT_LINE('ILM_COMMON.TABLE_EXIST failed: cannot find table ILMJOB');
  END IF;
  
  RESULT_VALUE := ILM_COMMON.TABLE_EXIST('NOTEXIST');
  IF RESULT_VALUE != 0 THEN
   DBMS_OUTPUT.PUT_LINE('ILM_COMMON.TABLE_EXIST failed: found non-existing table NOTEXIST');
  END IF;
END;
/


-- test ILM_COMMON.CAN_RESUME_JOB
DECLARE
  RESULT_VALUE NUMBER;
  V_JOB_ID NUMBER;
BEGIN

  -- test: cannot resume a job that is ended successfully
  SELECT DISTINCT
       FIRST_VALUE(ID) OVER (ORDER BY ID DESC) INTO V_JOB_ID      
       FROM ILMJOB WHERE JOBNAME LIKE 'HOT2COLD%' ;

  RESULT_VALUE := ILM_COMMON.CAN_RESUME_JOB(V_JOB_ID);
  IF RESULT_VALUE = 1 THEN
   DBMS_OUTPUT.PUT_LINE('ILM_COMMON.CAN_RESUME_JOB failed:  should not be able to job that is completed successfully');
  END IF;

  -- test: cannot resume a job that has failed but later another same job has run (even if it fails)
  INSERT INTO ILMJOB(ID, JOBNAME, STATUS, FROMTABLESPACE, TOTABLESPACE, STARTTIME) VALUES (ILMJOB_SEQUENCE.nextval, 'HOT2COLD_19000115_173752', 'FAILED', 'FROMTBS', 'TOTBS', CURRENT_TIMESTAMP)
    RETURNING ID INTO V_JOB_ID;
  INSERT INTO ILMJOB(ID, JOBNAME, STATUS, FROMTABLESPACE, TOTABLESPACE, STARTTIME) VALUES (ILMJOB_SEQUENCE.nextval, 'HOT2COLD_19000115_173752', 'FAILED', 'FROMTBS', 'TOTBS', CURRENT_TIMESTAMP);
  
  RESULT_VALUE := ILM_COMMON.CAN_RESUME_JOB(V_JOB_ID);
  IF RESULT_VALUE = 1 THEN
   DBMS_OUTPUT.PUT_LINE('ILM_COMMON.CAN_RESUME_JOB failed:  should not be able to resume a failed job while same type of job is created later');
  END IF;
  
  -- test: cannot resume a job that has failed but later another same job has ended successfully
  INSERT INTO ILMJOB(ID, JOBNAME, STATUS, FROMTABLESPACE, TOTABLESPACE, STARTTIME) VALUES (ILMJOB_SEQUENCE.nextval, 'HOT2COLD_19000115_173752', 'FAILED', 'FROMTBS', 'TOTBS', CURRENT_TIMESTAMP)
    RETURNING ID INTO V_JOB_ID;
  INSERT INTO ILMJOB(ID, JOBNAME, STATUS, FROMTABLESPACE, TOTABLESPACE, STARTTIME) VALUES (ILMJOB_SEQUENCE.nextval, 'HOT2COLD_19000115_173752', 'END', 'FROMTBS', 'TOTBS', CURRENT_TIMESTAMP);
  
  RESULT_VALUE := ILM_COMMON.CAN_RESUME_JOB(V_JOB_ID);
  IF RESULT_VALUE = 1 THEN
   DBMS_OUTPUT.PUT_LINE('ILM_COMMON.CAN_RESUME_JOB failed:  should not be able to resume a failed job that was later completed successfully');
  END IF;
  
  ROLLBACK;
END;
/